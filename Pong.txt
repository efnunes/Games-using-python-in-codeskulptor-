# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals for position and velocity for the ball and the paddle
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
ball_pos = [WIDTH/2 , HEIGHT/2]
ball_vel = [1, 1]
paddle1_pos  = HEIGHT/2
paddle2_pos = HEIGHT/2
paddle1_vel = 0
paddle2_vel = 0
score1 = 0
score2 = 0

# initialize ball_pos and ball_vel for new bal in middle of table
# controls the velocity depending on the direction
# LEFT = 0   and  RIGHT = 1
def spawn_ball(direction):
    global ball_pos, ball_vel 

    ball_pos = [WIDTH/2 , HEIGHT/2]
    if direction == 0: # indicates the LEFT direction
        ball_vel[0] = -random.randrange(120/60,240/60)
        ball_vel[1] = -random.randrange(60/60,180/60)
    else:  # indicates the RIGHT direction
        ball_vel[0] = random.randrange(120/60,240/60)
        ball_vel[1] = random.randrange(60/60,180/60)

# Function to start a new game
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel, score1, score2   
    
    spawn_ball(random.choice([0 ,1]))# gives a random direction to the ball at start


# The draw handler updates and draws the ball and the paddles on the canvas    
def draw(c):
    global score1, score2, paddle1_pos, paddle2_pos,paddle1_vel, paddle2_vel, ball_pos, ball_vel, BALL_RADIUS
    
    # draw mid line and gutters
    c.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    c.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    c.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
       
    # updates the position of the ball
    ball_pos [0] += ball_vel[0]
    ball_pos [1] += ball_vel[1] 
    
    # reflection of the ball from the top and bottom of the canvas
    if ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    
    if ball_pos[1] >= HEIGHT - BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
        
    # Checking if the ball collides with the paddle 
    # increasing the velocity by 10% everytime it does
    # if it doesn't hit the paddle back to start
    # The opposite player gets a point
    if ball_pos[0] <= BALL_RADIUS + PAD_WIDTH:
        
        if (ball_pos[1] >= paddle1_pos)and(ball_pos[1] <= paddle1_pos + PAD_HEIGHT):
            ball_vel[0] = - ball_vel[0]
            ball_vel[0] = 1.1 * ball_vel[0]
            ball_vel[1] = 1.1 * ball_vel[1]
        else:
            score2 = score2 + 1
            spawn_ball(1)
        
    if ball_pos[0] >= WIDTH - BALL_RADIUS - PAD_WIDTH:
        
        if ball_pos[1] >= paddle2_pos and ball_pos[1] <= paddle2_pos + PAD_HEIGHT:
            ball_vel[0] = - ball_vel[0]
            ball_vel[1] = 1.1 * ball_vel[1]
            ball_vel[0] = 1.1 * ball_vel[0]
        else:
            score1 = score1 + 1
            spawn_ball(0)
        
        
    # draw ball
    c.draw_circle(ball_pos,BALL_RADIUS, 5, 'White', 'White')
    
    # update paddle's vertical position, keep paddle on the screen
    
    paddle1_pos += paddle1_vel
    paddle2_pos += paddle2_vel
    
    
    if paddle1_pos <= 0:
        paddle1_pos = 0
        
    if paddle1_pos >=  HEIGHT - PAD_HEIGHT:
        paddle1_pos = HEIGHT - PAD_HEIGHT
        
    if paddle2_pos <= 0:
        paddle2_pos = 0
        
    if paddle2_pos >= HEIGHT - PAD_HEIGHT:
        paddle2_pos = HEIGHT - PAD_HEIGHT
        
        
    
    # draw paddles
    c.draw_line([PAD_WIDTH/2 ,paddle1_pos] , [PAD_WIDTH/2, paddle1_pos + PAD_HEIGHT], PAD_WIDTH, 'White')
    c.draw_line([WIDTH - PAD_WIDTH/2 , paddle2_pos], [WIDTH - PAD_WIDTH/2, paddle2_pos + PAD_HEIGHT], PAD_WIDTH, 'White')
    
    # draw scores
    c.draw_text( str(score1),[WIDTH/4 , 80], 50, 'White')
    c.draw_text( str(score2),[3*WIDTH/4, 80], 50, 'White')
    
    
        
def keydown(key):
    global paddle1_vel, paddle2_vel, paddle1_pos, paddle2_pos
    if key == simplegui.KEY_MAP ["up"]:
        paddle2_vel = -4
        paddle2_vel += paddle2_vel
        
    if key == simplegui.KEY_MAP ["down"]:
        paddle2_vel = 4
        paddle2_vel += paddle2_vel
        
    if key == simplegui.KEY_MAP ["w"]:
        paddle1_vel = -4
        paddle1_vel += paddle1_vel
        
        
    if key == simplegui.KEY_MAP ["s"]:
        paddle1_vel = 4
        paddle1_vel += paddle1_vel
        
   
def keyup(key):
    global paddle1_vel, paddle2_vel, paddle1_pos, paddle2_pos
    if key == simplegui.KEY_MAP ["up"]:
        paddle2_vel = 0
    
    if key == simplegui.KEY_MAP ["down"]:
        paddle2_vel = 0
        
    if key == simplegui.KEY_MAP ["w"]:
        paddle1_vel = 0
        
    if key == simplegui.KEY_MAP ["s"]:
        paddle1_vel = 0

def restart():
    global score1, score2
    score1 = 0
    score2 = 0
    new_game()
    

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.add_button ('Restart' , restart, 100)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)


# start frame
new_game()
frame.start()