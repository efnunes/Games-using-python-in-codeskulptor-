# Mini-project #6 - Blackjack

import simplegui
import random
import math

# load card sprite - 949x392 - source: jfitz.com
CARD_SIZE = (73, 98)
CARD_CENTER = (36.5, 49)
card_images = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/cards.jfitz.png")

CARD_BACK_SIZE = (71, 96)
CARD_BACK_CENTER = (35.5, 48)
card_back = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/card_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self, player):
        self.hand = []
        self.aces = 0
        self.hand_value = 0
        self.player_name = player
            
    def __str__(self):
        return self.player_name + ":"  + " value=" + str(self.hand_value);	# return a string representation of a hand

    # adds a new card to the hand 
    # checks for aces and adds values accordingly
    def add_card(self, card):
        self.hand.append(card)
        self.hand_value += VALUES[card.get_rank()]
        if (card.get_rank() == 'A'):
            self.aces += 1
        if (self.hand_value+10 <= 21 and self.aces > 0):
            self.hand_value += 10
        if self.hand_value > 21:
            in_play = False
            decision_maker()
           
    # gets the value of the hand
    def get_value(self):
        return self.hand_value
   
    # draws the dealer and players hand on canvas
    def draw(self, canvas, pos):
        spacing =list(pos);
        card_space = CARD_SIZE[0] + 25;
        for cd in self.hand:
            if(self.player_name=="Dealer" and in_play and spacing[0]==pos[0]):
                canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, [pos[0] + CARD_BACK_CENTER[0], pos[1] + CARD_BACK_CENTER[1]], CARD_BACK_SIZE);
            else:
                cd.draw(canvas,spacing);
            spacing[0] += card_space;
                
# define deck class 
class Deck:
    def __init__(self):
        self.deck_cards = range(0,52)
            
    # shuffle the deck of cards
    def shuffle(self):
        self.deck_cards = range(0,52)
        random.shuffle(self.deck_cards)
        
    # deals a card from shuffled deck
    def deal_card(self):
        new_card = self.deck_cards.pop(0)
        deal_card = Card(SUITS[new_card // 13],RANKS[new_card % 13])
        return deal_card
           
    def __str__(self):
        pass	

# define event handlers for buttons
# Function to decide who wins the hand
def decision_maker():
    global score,in_play, message;
    in_play=False;
    if(dealer.get_value()>21):
        print "Dealer got Busted"
        message = " Dealer got Busted ,YOU WIN."
        score+=1;
    elif player.get_value()>21:
        print "Player got Busted"
        message = " Player got Busted ,YOU LOSE."
        score-=1;
    elif(dealer.get_value()<player.get_value()):
        score+=1;
        print "Player wins"
        message = " YOU WON."
    else:
        score-=1;
        print "Dealer wins"
        message = " YOU LOSE."
    print str(player);
    print str(dealer);
    print "\n";

def deal():
    global outcome, in_play, score, player, dealer, message
    message = " "
    deck.shuffle();
    player=Hand("Player");
    dealer=Hand("Dealer");
    dealer.add_card(deck.deal_card());
    hit();
    dealer.add_card(deck.deal_card());
    hit();  
    if(in_play):
        score = -1;
    in_play = True

# deals a card from the randomly shuffled deck
def hit():
    player.add_card(deck.deal_card())	

# dealer draws a card if less than 17 , then the decision is made    
def stand():
    while(dealer.get_value() < 17):
        dealer.add_card(deck.deal_card());   
    if(in_play):
        decision_maker();
   
# draw handler    
def draw(canvas):
    global outcome, message
    canvas.draw_text("Blackjack",[30,100],40,"Blue");
    canvas.draw_text("Score "+str(score),[400,100],30,"Black");
    dealer.draw(canvas,[30,200]);
    if in_play:
        outcome = "Hit or Stand?"
    else:
        outcome = "New Deal?"
    canvas.draw_text(outcome,[30,350],30,"Black");
    player.draw(canvas,[30,400])    
    canvas.draw_text("Player",[30,550],30,"Black");
    canvas.draw_text("Dealer",[30,180],30,"Black");
    canvas.draw_text(message, [150,180],30,"Red");


# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
frame.start()
deck=Deck();
player=Hand("Player");
dealer=Hand("Dealer");
deal()

